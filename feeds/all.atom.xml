<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ben by Ben Jacobs</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2012-10-30T00:00:00+01:00</updated><entry><title>Simple is Better than Complex</title><link href="/simple-is-better-than-complex.html" rel="alternate"></link><updated>2012-10-30T00:00:00+01:00</updated><author><name>Ben Jacobs</name></author><id>tag:,2012-10-30:simple-is-better-than-complex.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.&lt;/p&gt;
&lt;p&gt;—Brian W. Kernighan&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This rang very true for me recently when I was trying to upgrade a component I'd written to fit a larger framework and &lt;em&gt;it was too hard&lt;/em&gt;. (I know. Boo hoo). It would have been easier to understand and re-work had I not tried to be so clever.&lt;/p&gt;
&lt;p&gt;As seen on &lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;&lt;/p&gt;</summary><category term="personal"></category><category term="code"></category><category term="quotes"></category></entry><entry><title>While Reading the Official Django Tutorial</title><link href="/while-reading-the-official-django-tutorial.html" rel="alternate"></link><updated>2012-10-28T00:00:00+02:00</updated><author><name>Ben Jacobs</name></author><id>tag:,2012-10-28:while-reading-the-official-django-tutorial.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Nerd joke coming:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because the URL patterns are regular expressions, there really is no limit on what you can do with them. And there's no need to add URL cruft such as .php -- unless you have a sick sense of humor, in which case you can do something like this:&lt;/p&gt;
&lt;p&gt;(r'^polls/latest.php$', 'polls.views.index'),&lt;/p&gt;
&lt;p&gt;But, don't do that. It's silly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/dev/intro/tutorial03/#philosophy"&gt;Django&lt;/a&gt;&lt;/p&gt;</summary><category term="code"></category></entry><entry><title>There's a hole in the bucket</title><link href="/theres-a-hole-in-the-bucket.html" rel="alternate"></link><updated>2012-10-23T00:00:00+02:00</updated><author><name>Ben Jacobs</name></author><id>tag:,2012-10-23:theres-a-hole-in-the-bucket.html</id><summary type="html">&lt;p&gt;A few weeks ago, I shared about how I wanted to write a better pastebin/pastebucket, one that was beautiful, easy to use, and suitable for text. I pretty quickly mocked one up in NodeJS, and I even had it pseudo-deployed on a server owned by a friend.&lt;/p&gt;
&lt;p&gt;Now, I'd never used NodeJS before, and, perhaps I'm really dumb, but I'm having trouble moving beyond the most basic example code. Sure, there are really awesome things with the package management and the libraries seem robust. However, I kept getting stuck at different points.&lt;/p&gt;
&lt;p&gt;So, I succumbed to my dumbness and left it on the shelf for a little while. Today, I started taking a free course from &lt;a href="http://www.10gen.com"&gt;10Gen&lt;/a&gt; on MongoDB. In it, they write most of their examples in Python. Now, I don't have much more experience with Python than I do with server-side JS. I've read most of &lt;em&gt;Learn Python the Hard Way&lt;/em&gt; and I've written a single useful script in Python. (As a side note: that one script saved me from writing in VBScript, so I can hardly express my gratitude for the simplicity of Python and the excellent &lt;a href="http://packages.python.org/openpyxl/"&gt;OpenPyXL libraryy&lt;/a&gt;). However, despite my newbie status with regards to Python, I was struck again by how intuitive this language is.&lt;/p&gt;
&lt;p&gt;So, out the window goes my fledgling NodeJS code. In comes a new version drafted in Python. The original code wasn't even 200 lines long. It's a little silly to even write a post about the switch, but I'll probably look back at it as a touch stone. Peer pressure had a little to do with this. I have a bunch of friends who write in Python and they, plus the things they work on, are pretty cool.&lt;/p&gt;
&lt;p&gt;Take away:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Look for the beautiful, intuitive tools.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="code"></category></entry><entry><title>Programming Motherfucker</title><link href="/programming-motherfucker.html" rel="alternate"></link><updated>2012-10-11T00:00:00+02:00</updated><author><name>Ben Jacobs</name></author><id>tag:,2012-10-11:programming-motherfucker.html</id><summary type="html">&lt;p&gt;And now, some words of inspiration from &lt;a href="https://twitter.com/zedshaw" title="@zedshaw"&gt;Zed Shaw&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think I'm going to create the ultimate software development methodology. It'll be revolutionary compared to others because it will focus on the one thing that gets software done. Its entire focus will be this one, glorious, completely useful activity for writing software. It's name even embodies the perfection of this programming methodology. The name is:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Programming, Motherfucker&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks for the words, master Zed. Now, back to work!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://oppugn.us/posts/1300784321.html" title="oppugn.us"&gt;Link to the full article&lt;/a&gt;&lt;/p&gt;</summary><category term="code"></category></entry><entry><title>A Better Bucket</title><link href="/a-better-bucket.html" rel="alternate"></link><updated>2012-10-03T00:00:00+02:00</updated><author><name>Ben Jacobs</name></author><id>tag:,2012-10-03:a-better-bucket.html</id><summary type="html">&lt;h2&gt;Or: a fantastic journey of exploration and discovery&lt;/h2&gt;
&lt;h4&gt;Or: A Single-Post blog entry platform&lt;/h4&gt;
&lt;p&gt;The other day, I was thinking about the gulf in ways to publish content to the web. On the one hand, there's Twitter or Facebook. These both offer easy, yet ephemeral ways, to share content. Facebook has its "notes," but these are ugly and don't seem to be used very much (at least in my circles). At the other extreme, there are blogs. Anyone can set one up, and with all the free templates that are available, it's pretty easy for the average user to come up with something decent looking. The problem with blogs is that unless you're actively cultivating them, they can get stale pretty quickly. I've run across numerous blogs that have a post or two that are years old and then just drop off (I've seen this called "blog rot"). I've also seen people create blogs for the express purpose of posting one or two things. Back in the glorious days of Google Buzz, I had a friend create a blog so he could write one long post that felt too cramped on our feed. What is someone to do if they want write something, quickly publish it, and distribute the link?&lt;/p&gt;
&lt;p&gt;Those in the coder/hacker community are probably familiar with &lt;a href="http://www.pastebucket.com/"&gt;PasteBucket&lt;/a&gt; and other similar services. These can be used to quickly publish snippets of computer code, and they're mostly used for sharing more than would be appropriate in a forumn or IRC channel. These sites are great for this purpose, but they had some downfalls:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They're geared exclusively toward computer code&lt;/li&gt;
&lt;li&gt;They're rather ugly&lt;/li&gt;
&lt;li&gt;Oh yeah... they have ads.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While discussing my single-post blog idea online the other day, &lt;a href="https://twitter.com/carljm"&gt;@carljm&lt;/a&gt; turned me on to &lt;a href="http://gist.io/"&gt;Gist.io&lt;/a&gt;. This is a visually attractive project that lets one take a MarkDown file stored on &lt;a href="http://www.github.com"&gt;Github&lt;/a&gt; and render it to an HTML page. The author, Idan Gazit, also has a lovely description of why quick-and-dirty publishing services like this are useful:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes, we just want to share a bit of writing that is neither. Maybe we want to write for a specific audience, but don’t want to address the people who usually read our blogs. Maybe it’s just something that doesn’t fit into 140 characters.&lt;/p&gt;
&lt;p&gt;For these situations, even setting up a Tumblr seems like too much effort. Pastebins are great, but the reading experience sucks in general, and particularly on mobile devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This seems like a cool service, but, even though it's aethetics are better than PasteBucket et al., it still has a hacker focus. Who else uses Github? &lt;/p&gt;
&lt;p&gt;So, I decided to write something. When I started to think about it, I realized this was about the simplest web-app project imaginable for a variety of reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I wanted to keep it anonymous, so I didn't need to worry about any account information. In fact, I didn't want to cache ANY user informat&lt;/li&gt;
&lt;li&gt;Open-source libraries already existed for quck and dirty text/MarkDown editors&lt;/li&gt;
&lt;li&gt;Open-source libraries already existed for makeing quick and attractive pages&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, I set about the task.&lt;/p&gt;
&lt;h2&gt;Project's Philosophy:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;li&gt;Elegant (aesthetically, although also internally)&lt;/li&gt;
&lt;li&gt;Easy for anyone&lt;/li&gt;
&lt;li&gt;Anonymous (because who the hell needs &lt;em&gt;another&lt;/em&gt; online account)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Process Process Process&lt;/h2&gt;
&lt;p&gt;It had been a little while since I'd coded a web app, and there were some things that I'd been meaning to try out: notabely the &lt;a href="http://twitter.github.com/bootstrap/"&gt;Twitter Bootstrap&lt;/a&gt; and &lt;a href="nodejs.org"&gt;NodeJS&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The last time I wrote a web app, it needed to interact with a database on a server different than the webserver. So, I naturally set about using this architecture (w/o thinking too much). I whipped up some front-end scripts for posting and querying via jQuery AJAX calls. It worked. It was ugly.&lt;/p&gt;
&lt;p&gt;Then, I ran across &lt;a href="http://expressjs.com/"&gt;ExpressJS&lt;/a&gt;. Ah! A lovely system. I re-worked my app to serve static .html pages in almost all instances and to rely on some of the light-weight templating that comes with Express when it couldn't.&lt;/p&gt;
&lt;p&gt;The result is a good first start, and I'm rather proud of it. An experienced developer would probably smirk at how long it took me to get some of this &lt;em&gt;very&lt;/em&gt; basic stuff up and running, but I keep telling myself that I've only been messing with Bootstrap/Node/Express for a few days.&lt;/p&gt;
&lt;h2&gt;Can I see it?&lt;/h2&gt;
&lt;p&gt;I'm afraid I haven't deployed it yet. If you want to try it for yourself, you'll have to download it and run it. If you have command line acces and already have Node installed, you can do the following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;benmj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;betterpaste&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;betterpaste&lt;/span&gt;
&lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The server will start running on your computer at port 3000. In the near future, I hope to find a place where I can deploy this. I was hoping Heroku would let me, but I see that they discourage relying upon the filesystem for storage. I might look into a light-weight, NoSQL, solution. If you have any recommendations, let me know.&lt;/p&gt;</summary><category term="code"></category></entry><entry><title>LapTimer Posted to GitHub</title><link href="/laptimer-posted-to-github.html" rel="alternate"></link><updated>2012-09-07T00:00:00+02:00</updated><author><name>Ben Jacobs</name></author><id>tag:,2012-09-07:laptimer-posted-to-github.html</id><summary type="html">&lt;p&gt;I've been hacking around with computers for over a decade, and have always loved the idea of the open source movement. I was running Debian Linux on my personal computer back in sixth grade. (This had its ups and downs, and I still dual booted so I could play StarCraft). Despite my hero worship for ESR, RMS, LT and the rest--I could never think of something to contribute.&lt;/p&gt;
&lt;p&gt;The other day I posted my &lt;a href="reusable-laptimer-for-ios.html"&gt;LapTimer&lt;/a&gt;, which I wrote because I &lt;em&gt;needed it for a project&lt;/em&gt;. This is probably how a lot of great open source projects come about. You need something. You create something. You give that thing up to the world.&lt;/p&gt;
&lt;p&gt;In the spirit of Open Source, I've created a spot for &lt;a href="https://github.com/benmj/LapTimer"&gt;LapTimer on GitHub&lt;/a&gt;. I'll have to trust everyone who says that no project is too small to share.&lt;/p&gt;
&lt;p&gt;Happy Hacking! Also, thanks to &lt;a href="https://twitter.com/scharton"&gt;@scharton&lt;/a&gt; for inspiring me.&lt;/p&gt;</summary><category term="code"></category></entry><entry><title>Reusable Lap Timer for iOS</title><link href="/reusable-lap-timer-for-ios.html" rel="alternate"></link><updated>2012-09-04T00:00:00+02:00</updated><author><name>Ben Jacobs</name></author><id>tag:,2012-09-04:reusable-lap-timer-for-ios.html</id><summary type="html">&lt;p&gt;The other day I needed to insert a Lap Timer into an existing iPhone application. Being the lazy programmer that I am, I first searched around online to see if anyone had already written a clean, reusable Lap Timer, but there was nothing. iDevices ship with the clock app, which includes a stopwatch function. I set about imitating its look and functionality.&lt;/p&gt;
&lt;p&gt;&lt;img alt="LapTimer Screenshot" src="./images/LapTimer.png" /&gt;&lt;/p&gt;
&lt;p&gt;Some specs about LapTimer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses &lt;a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/nsdate_Class/Reference/Reference.html"&gt;NSDate&lt;/a&gt; to store accurate times.&lt;/li&gt;
&lt;li&gt;Uses &lt;a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/Reference/NSTimer.html"&gt;NSTimer&lt;/a&gt; to refresh the labels on a millisecond basis, so you get to see those fun numbers counting up into infinity&lt;/li&gt;
&lt;li&gt;Creates a &lt;em&gt;LapTimerProtocol&lt;/em&gt;, which an app could use to get "return values" from the LapTimerController&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If all that sounds like fun, feel free to download the source and play around with it. The source code is offered without warranty or copyright. Do whatever you'd like with it. I make use of the &lt;a href="http://www.mlsite.net/blog/?p=232"&gt;UIButtonGlossy Class&lt;/a&gt; written by Michael Heyeck.&lt;/p&gt;
&lt;p&gt;&lt;a href="./images/LapTimer.zip"&gt;Download LapTimer&lt;/a&gt;&lt;/p&gt;</summary><category term="code"></category></entry><entry><title>Scripting Permission Changes for Pelican</title><link href="/scripting-permission-changes-for-pelican.html" rel="alternate"></link><updated>2012-08-21T00:00:00+02:00</updated><author><name>Ben Jacobs</name></author><id>tag:,2012-08-21:scripting-permission-changes-for-pelican.html</id><summary type="html">&lt;p&gt;I'm not a frequent blogger. To date, this is my second blog post. But this doesn't mean that I don't enjoy toying around with different blogging and publishing software. Last week, I decided to move my Wordpress blog to the static blogging software &lt;a href="http://www.getpelican.com"&gt;Pelican&lt;/a&gt;. After looking around at the guts of Wordpress, I was turned off by its complexity. I also really really really wanted to be able to edit posts offline and in my own &lt;a href="http://www.sublimetext.com"&gt;editor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pelican comes with a pretty robust Makefile that can recompile and upload your website via SSH. I ran into a small issue with my Godaddy account, in which all new files and folders were unreadable because of permission issues. The files needed to be readable by all users on the server and the folders needed to be executable by all users. I wrote a little bash script called &lt;strong&gt;permissions.sh&lt;/strong&gt; and uploaded it to my server.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# permissions.sh&lt;/span&gt;

find ./ -type d | xargs chmod a+x
chmod -R a+r *
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The new "trick" for me was the &lt;strong&gt;find -type d&lt;/strong&gt; to only list directories. I then added the following line to my Pelican Makefile under the &lt;strong&gt;ssh_upload&lt;/strong&gt; section:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; $&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SSH_USER&lt;/span&gt;&lt;span class="p"&gt;)@&lt;/span&gt;$&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SSH_HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Works great! &lt;s&gt;The only issue is that I have to type my twice, once for the SCP transfer and once for the SSH command. I'll look around and see if there are any ways to store these credentials for a tiny moment in time. If not, typing the password twice is a small price to pay for not having to remotely log into the server every time I make a change.&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;As soon as I uploaded the last paragraph (dutifully entering my password twice), I decided to search around for a way to authenticate the connection between my computer and the server without the passwords. I found &lt;a href="http://www.linuxproblem.org/art_9.html"&gt;this little jewel&lt;/a&gt; and it works even better. Vive le unix.&lt;/p&gt;</summary><category term="personal"></category><category term="code"></category><category term="bash"></category><category term="geeky"></category></entry><entry><title>First Post</title><link href="/first-post.html" rel="alternate"></link><updated>2012-06-24T00:00:00+02:00</updated><author><name>Ben Jacobs</name></author><id>tag:,2012-06-24:first-post.html</id><summary type="html">&lt;p&gt;I have been inspired… and that led me here.&lt;/p&gt;
&lt;p&gt;I bought this domain a few months ago. I knew I needed a little corner of the net to call my own: a place to write a thought or two or share a cool hack. I aspire to create/contribute to more open source projects, and whenever that happens I’ll need space to discuss it. Still, I sat on the domain–too lethargic to even click the “configure wordpress” button.&lt;/p&gt;
&lt;p&gt;Yesterday, I attended the &lt;a href="http://59daysofcode.com/"&gt;59 Days of Code&lt;/a&gt;. “Damn,” I thought, “there’s a ton of ideas and energy out there. I better get going.”&lt;/p&gt;
&lt;p&gt;Here we are. Stay posted.&lt;/p&gt;</summary><category term="personal"></category><category term="code"></category></entry></feed>